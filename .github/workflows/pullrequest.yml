
#   Development pipeline
#   611-CI-project/cccatalog-frontend

name: pull request 
on:
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Check source code linting
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.14.0'
      - name: Checkout repository code
        uses: actions/checkout@v1
      - name: Cache or retrieve node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: cache-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            cache-${{ runner.os }}-build-${{ env.cache-name }}-
            cache-${{ runner.os }}-build-
            cache-${{ runner.os }}-
      - name: Install npm dependencies
        run: npm ci
      - name: Run source code linting
        run: npm run lint

  unit:
    name: Run unit testing
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout repository code
        uses: actions/checkout@v1
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.14.0'
      - name: Cache or retrieve node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: cache-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            cache-${{ runner.os }}-build-${{ env.cache-name }}-
            cache-${{ runner.os }}-build-
            cache-${{ runner.os }}-
      - name: Install npm dependencies
        run: npm ci
      - name: Run unit testing 
        run: CI=true npm test  >> ./coverage/code_coverage
      - name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: coverage

  coverage:
    needs: [unit]
    name: Check code coverage of unit test
    runs-on: ubuntu-latest
    steps:
      - name: Get test report
        uses: actions/download-artifact@v1
        with:
          name: coverage
      - name: Check coverage values
        run: awk '/All/ { n = 50; if($4 < n && $6 < n && $8 < n && $10 < n) exit 1; else {print "OK"}}' coverage/code_coverage
  
  build:
    name: Build & upload source code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v1
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.14.0'
      - name: Cache or retrieve node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: cache-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            cache-${{ runner.os }}-build-${{ env.cache-name }}-
            cache-${{ runner.os }}-build-
            cache-${{ runner.os }}-
      - name: Install npm dependencies
        run: npm ci
      - name: Build application for production
        run: npm run build
      - name: Move distribution files to dist/ directory
        run: |
          cp distribution/* dist/
          echo 'dist/' && ls -1F dist | sed 's/^/  â”” /' 
      - name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  publish_distribution:
    name: Publish distribution image
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download built source code
        uses: actions/download-artifact@v1
        with:
          name: dist
      - name: Login to docker
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: ${{ secrets.GITHUB_USERNAME }}
          password: ${{ secrets.GITHUB_ACCESS_TOKEN }}
      - name: Build distribution image
        run: docker build ./dist -t ${{ github.sha }}
      - name: Tag distribution image
        run: docker tag ${{ github.sha }} docker.pkg.github.com/611-ci-project/cccatalog-frontend/cccatalog-dist:${{ github.sha }}
      - name: Push distribution image
        run: docker push docker.pkg.github.com/611-ci-project/cccatalog-frontend/cccatalog-dist:${{ github.sha }}

  kubernetes:
      needs: [publish_distribution]
      runs-on: ubuntu-latest
      name: Deploy to staging kubernetes cluster
      steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
      - name: Checkout repo
        uses: actions/checkout@v1
      - name: Set context to staging cluster
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{secrets.KUBE_CONF}}
        id: setcontext
      - name: Deploy to staging cluster
        uses: Azure/k8s-deploy@v1
        with:
          manifests: |
            kubernetes/cc-frontend-deployment.yml
            kubernetes/cc-frontend-service.yml
          images: 'docker.pkg.github.com/611-ci-project/cccatalog-frontend/cccatalog:c43cade4e3de0efe41f45c37ab5893fd07945cd4'
          imagepullsecrets: regcred
